# Generated from BaiTap1.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\60")
        buf.write("\u010e\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3")
        buf.write("\7\3\7\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\13\3\13\3")
        buf.write("\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3")
        buf.write("\16\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\20\3\20")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\24\3\24\3\24\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32")
        buf.write("\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3\37")
        buf.write("\3 \3 \3 \3!\3!\3!\3\"\3\"\3\"\3#\3#\3#\3$\3$\3$\3%\3")
        buf.write("%\3%\3&\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3)\3")
        buf.write(")\3*\3*\3+\3+\3,\3,\3-\6-\u00fc\n-\r-\16-\u00fd\3.\3.")
        buf.write("\3.\3.\7.\u0104\n.\f.\16.\u0107\13.\3/\3/\5/\u010b\n/")
        buf.write("\3/\3/\2\2\60\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13")
        buf.write("\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26")
        buf.write("+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#")
        buf.write("E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60\3\2\7\4\2C\\c|\3\2\62;\5")
        buf.write("\2\62;CHch\4\2\13\13\"\"\4\2\f\f\16\17\2\u0110\2\3\3\2")
        buf.write("\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2")
        buf.write("\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2")
        buf.write("\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35")
        buf.write("\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2")
        buf.write("\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2")
        buf.write("\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2")
        buf.write("\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2")
        buf.write("\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2")
        buf.write("\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3")
        buf.write("\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\3_")
        buf.write("\3\2\2\2\5o\3\2\2\2\7q\3\2\2\2\ts\3\2\2\2\13u\3\2\2\2")
        buf.write("\rw\3\2\2\2\17y\3\2\2\2\21{\3\2\2\2\23\u0080\3\2\2\2\25")
        buf.write("\u0082\3\2\2\2\27\u0086\3\2\2\2\31\u008e\3\2\2\2\33\u0091")
        buf.write("\3\2\2\2\35\u0096\3\2\2\2\37\u009a\3\2\2\2!\u009c\3\2")
        buf.write("\2\2#\u00a3\3\2\2\2%\u00a9\3\2\2\2\'\u00b2\3\2\2\2)\u00b5")
        buf.write("\3\2\2\2+\u00b8\3\2\2\2-\u00c0\3\2\2\2/\u00c2\3\2\2\2")
        buf.write("\61\u00c4\3\2\2\2\63\u00c6\3\2\2\2\65\u00c8\3\2\2\2\67")
        buf.write("\u00ca\3\2\2\29\u00cc\3\2\2\2;\u00ce\3\2\2\2=\u00d0\3")
        buf.write("\2\2\2?\u00d3\3\2\2\2A\u00d6\3\2\2\2C\u00d9\3\2\2\2E\u00dc")
        buf.write("\3\2\2\2G\u00df\3\2\2\2I\u00e2\3\2\2\2K\u00e5\3\2\2\2")
        buf.write("M\u00ea\3\2\2\2O\u00f0\3\2\2\2Q\u00f2\3\2\2\2S\u00f4\3")
        buf.write("\2\2\2U\u00f6\3\2\2\2W\u00f8\3\2\2\2Y\u00fb\3\2\2\2[\u00ff")
        buf.write("\3\2\2\2]\u010a\3\2\2\2_`\7e\2\2`a\7n\2\2ab\7c\2\2bc\7")
        buf.write("u\2\2cd\7u\2\2de\7\"\2\2ef\7R\2\2fg\7t\2\2gh\7q\2\2hi")
        buf.write("\7i\2\2ij\7t\2\2jk\7c\2\2kl\7o\2\2lm\7\"\2\2mn\7}\2\2")
        buf.write("n\4\3\2\2\2op\7\177\2\2p\6\3\2\2\2qr\7]\2\2r\b\3\2\2\2")
        buf.write("st\7_\2\2t\n\3\2\2\2uv\7\"\2\2v\f\3\2\2\2wx\7.\2\2x\16")
        buf.write("\3\2\2\2yz\7=\2\2z\20\3\2\2\2{|\7x\2\2|}\7q\2\2}~\7k\2")
        buf.write("\2~\177\7f\2\2\177\22\3\2\2\2\u0080\u0081\7}\2\2\u0081")
        buf.write("\24\3\2\2\2\u0082\u0083\7k\2\2\u0083\u0084\7p\2\2\u0084")
        buf.write("\u0085\7v\2\2\u0085\26\3\2\2\2\u0086\u0087\7d\2\2\u0087")
        buf.write("\u0088\7q\2\2\u0088\u0089\7q\2\2\u0089\u008a\7n\2\2\u008a")
        buf.write("\u008b\7g\2\2\u008b\u008c\7c\2\2\u008c\u008d\7p\2\2\u008d")
        buf.write("\30\3\2\2\2\u008e\u008f\7k\2\2\u008f\u0090\7h\2\2\u0090")
        buf.write("\32\3\2\2\2\u0091\u0092\7g\2\2\u0092\u0093\7n\2\2\u0093")
        buf.write("\u0094\7u\2\2\u0094\u0095\7g\2\2\u0095\34\3\2\2\2\u0096")
        buf.write("\u0097\7h\2\2\u0097\u0098\7q\2\2\u0098\u0099\7t\2\2\u0099")
        buf.write("\36\3\2\2\2\u009a\u009b\7?\2\2\u009b \3\2\2\2\u009c\u009d")
        buf.write("\7t\2\2\u009d\u009e\7g\2\2\u009e\u009f\7v\2\2\u009f\u00a0")
        buf.write("\7w\2\2\u00a0\u00a1\7t\2\2\u00a1\u00a2\7p\2\2\u00a2\"")
        buf.write("\3\2\2\2\u00a3\u00a4\7d\2\2\u00a4\u00a5\7t\2\2\u00a5\u00a6")
        buf.write("\7g\2\2\u00a6\u00a7\7c\2\2\u00a7\u00a8\7m\2\2\u00a8$\3")
        buf.write("\2\2\2\u00a9\u00aa\7e\2\2\u00aa\u00ab\7q\2\2\u00ab\u00ac")
        buf.write("\7p\2\2\u00ac\u00ad\7v\2\2\u00ad\u00ae\7k\2\2\u00ae\u00af")
        buf.write("\7p\2\2\u00af\u00b0\7w\2\2\u00b0\u00b1\7g\2\2\u00b1&\3")
        buf.write("\2\2\2\u00b2\u00b3\7-\2\2\u00b3\u00b4\7?\2\2\u00b4(\3")
        buf.write("\2\2\2\u00b5\u00b6\7/\2\2\u00b6\u00b7\7?\2\2\u00b7*\3")
        buf.write("\2\2\2\u00b8\u00b9\7e\2\2\u00b9\u00ba\7c\2\2\u00ba\u00bb")
        buf.write("\7n\2\2\u00bb\u00bc\7n\2\2\u00bc\u00bd\7q\2\2\u00bd\u00be")
        buf.write("\7w\2\2\u00be\u00bf\7v\2\2\u00bf,\3\2\2\2\u00c0\u00c1")
        buf.write("\7/\2\2\u00c1.\3\2\2\2\u00c2\u00c3\7#\2\2\u00c3\60\3\2")
        buf.write("\2\2\u00c4\u00c5\7-\2\2\u00c5\62\3\2\2\2\u00c6\u00c7\7")
        buf.write(",\2\2\u00c7\64\3\2\2\2\u00c8\u00c9\7\61\2\2\u00c9\66\3")
        buf.write("\2\2\2\u00ca\u00cb\7\'\2\2\u00cb8\3\2\2\2\u00cc\u00cd")
        buf.write("\7>\2\2\u00cd:\3\2\2\2\u00ce\u00cf\7@\2\2\u00cf<\3\2\2")
        buf.write("\2\u00d0\u00d1\7>\2\2\u00d1\u00d2\7?\2\2\u00d2>\3\2\2")
        buf.write("\2\u00d3\u00d4\7@\2\2\u00d4\u00d5\7?\2\2\u00d5@\3\2\2")
        buf.write("\2\u00d6\u00d7\7?\2\2\u00d7\u00d8\7?\2\2\u00d8B\3\2\2")
        buf.write("\2\u00d9\u00da\7#\2\2\u00da\u00db\7?\2\2\u00dbD\3\2\2")
        buf.write("\2\u00dc\u00dd\7(\2\2\u00dd\u00de\7(\2\2\u00deF\3\2\2")
        buf.write("\2\u00df\u00e0\7~\2\2\u00e0\u00e1\7~\2\2\u00e1H\3\2\2")
        buf.write("\2\u00e2\u00e3\7\62\2\2\u00e3\u00e4\7z\2\2\u00e4J\3\2")
        buf.write("\2\2\u00e5\u00e6\7v\2\2\u00e6\u00e7\7t\2\2\u00e7\u00e8")
        buf.write("\7w\2\2\u00e8\u00e9\7g\2\2\u00e9L\3\2\2\2\u00ea\u00eb")
        buf.write("\7h\2\2\u00eb\u00ec\7c\2\2\u00ec\u00ed\7n\2\2\u00ed\u00ee")
        buf.write("\7u\2\2\u00ee\u00ef\7g\2\2\u00efN\3\2\2\2\u00f0\u00f1")
        buf.write("\7)\2\2\u00f1P\3\2\2\2\u00f2\u00f3\7$\2\2\u00f3R\3\2\2")
        buf.write("\2\u00f4\u00f5\t\2\2\2\u00f5T\3\2\2\2\u00f6\u00f7\t\3")
        buf.write("\2\2\u00f7V\3\2\2\2\u00f8\u00f9\t\4\2\2\u00f9X\3\2\2\2")
        buf.write("\u00fa\u00fc\t\5\2\2\u00fb\u00fa\3\2\2\2\u00fc\u00fd\3")
        buf.write("\2\2\2\u00fd\u00fb\3\2\2\2\u00fd\u00fe\3\2\2\2\u00feZ")
        buf.write("\3\2\2\2\u00ff\u0100\7\61\2\2\u0100\u0101\7\61\2\2\u0101")
        buf.write("\u0105\3\2\2\2\u0102\u0104\n\6\2\2\u0103\u0102\3\2\2\2")
        buf.write("\u0104\u0107\3\2\2\2\u0105\u0103\3\2\2\2\u0105\u0106\3")
        buf.write("\2\2\2\u0106\\\3\2\2\2\u0107\u0105\3\2\2\2\u0108\u010b")
        buf.write("\5Y-\2\u0109\u010b\5[.\2\u010a\u0108\3\2\2\2\u010a\u0109")
        buf.write("\3\2\2\2\u010b\u010c\3\2\2\2\u010c\u010d\b/\2\2\u010d")
        buf.write("^\3\2\2\2\6\2\u00fd\u0105\u010a\3\b\2\2")
        return buf.getvalue()


class BaiTap1Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    ALPHA = 41
    DIGIT = 42
    HEX_DIGIT = 43
    SPACES = 44
    COMMENT = 45
    WS = 46

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'class Program {'", "'}'", "'['", "']'", "' '", "','", "';'", 
            "'void'", "'{'", "'int'", "'boolean'", "'if'", "'else'", "'for'", 
            "'='", "'return'", "'break'", "'continue'", "'+='", "'-='", 
            "'callout'", "'-'", "'!'", "'+'", "'*'", "'/'", "'%'", "'<'", 
            "'>'", "'<='", "'>='", "'=='", "'!='", "'&&'", "'||'", "'0x'", 
            "'true'", "'false'", "'''", "'\"'" ]

    symbolicNames = [ "<INVALID>",
            "ALPHA", "DIGIT", "HEX_DIGIT", "SPACES", "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "ALPHA", "DIGIT", "HEX_DIGIT", "SPACES", 
                  "COMMENT", "WS" ]

    grammarFileName = "BaiTap1.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


