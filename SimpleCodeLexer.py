# Generated from SimpleCode.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\65")
        buf.write("\u0144\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3")
        buf.write("\t\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\r\3\r\3")
        buf.write("\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20")
        buf.write("\3\20\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\25\3\25\3\25\3\26\3\26\3\26\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\31\3\31\3\32")
        buf.write("\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37")
        buf.write("\3 \3 \3 \3!\3!\3!\3\"\3\"\3\"\3#\3#\3#\3$\3$\3$\3%\3")
        buf.write("%\3%\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u00ed\n&\3\'\3\'")
        buf.write("\3\'\7\'\u00f2\n\'\f\'\16\'\u00f5\13\'\3(\3(\5(\u00f9")
        buf.write("\n(\3)\3)\7)\u00fd\n)\f)\16)\u0100\13)\3*\3*\3*\3*\6*")
        buf.write("\u0106\n*\r*\16*\u0107\3+\3+\3,\3,\3,\3,\3-\3-\7-\u0112")
        buf.write("\n-\f-\16-\u0115\13-\3-\3-\3.\3.\3/\3/\3\60\3\60\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u0128\n")
        buf.write("\61\3\62\6\62\u012b\n\62\r\62\16\62\u012c\3\62\3\62\3")
        buf.write("\63\3\63\5\63\u0133\n\63\3\63\5\63\u0136\n\63\3\63\3\63")
        buf.write("\3\64\3\64\3\64\3\64\7\64\u013e\n\64\f\64\16\64\u0141")
        buf.write("\13\64\3\64\3\64\2\2\65\3\3\5\4\7\5\t\6\13\7\r\b\17\t")
        buf.write("\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23")
        buf.write("%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36")
        buf.write(";\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63")
        buf.write("e\64g\65\3\2\7\4\2C\\c|\3\2\62;\5\2\62;CHch\4\2\13\13")
        buf.write("\"\"\4\2\f\f\17\17\2\u014f\2\3\3\2\2\2\2\5\3\2\2\2\2\7")
        buf.write("\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2")
        buf.write("\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2")
        buf.write("\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2")
        buf.write("\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2")
        buf.write("\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63")
        buf.write("\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2")
        buf.write("\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2")
        buf.write("\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3")
        buf.write("\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y")
        buf.write("\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2")
        buf.write("c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\3i\3\2\2\2\5o\3\2\2\2")
        buf.write("\7w\3\2\2\2\ty\3\2\2\2\13{\3\2\2\2\r}\3\2\2\2\17\177\3")
        buf.write("\2\2\2\21\u0081\3\2\2\2\23\u0083\3\2\2\2\25\u0085\3\2")
        buf.write("\2\2\27\u008a\3\2\2\2\31\u008c\3\2\2\2\33\u008e\3\2\2")
        buf.write("\2\35\u0091\3\2\2\2\37\u0096\3\2\2\2!\u009a\3\2\2\2#\u009c")
        buf.write("\3\2\2\2%\u00a3\3\2\2\2\'\u00a9\3\2\2\2)\u00b2\3\2\2\2")
        buf.write("+\u00b5\3\2\2\2-\u00b8\3\2\2\2/\u00c0\3\2\2\2\61\u00c2")
        buf.write("\3\2\2\2\63\u00c4\3\2\2\2\65\u00c6\3\2\2\2\67\u00c8\3")
        buf.write("\2\2\29\u00ca\3\2\2\2;\u00cc\3\2\2\2=\u00ce\3\2\2\2?\u00d0")
        buf.write("\3\2\2\2A\u00d3\3\2\2\2C\u00d6\3\2\2\2E\u00d9\3\2\2\2")
        buf.write("G\u00dc\3\2\2\2I\u00df\3\2\2\2K\u00ec\3\2\2\2M\u00ee\3")
        buf.write("\2\2\2O\u00f8\3\2\2\2Q\u00fa\3\2\2\2S\u0101\3\2\2\2U\u0109")
        buf.write("\3\2\2\2W\u010b\3\2\2\2Y\u010f\3\2\2\2[\u0118\3\2\2\2")
        buf.write("]\u011a\3\2\2\2_\u011c\3\2\2\2a\u0127\3\2\2\2c\u012a\3")
        buf.write("\2\2\2e\u0135\3\2\2\2g\u0139\3\2\2\2ij\7e\2\2jk\7n\2\2")
        buf.write("kl\7c\2\2lm\7u\2\2mn\7u\2\2n\4\3\2\2\2op\7R\2\2pq\7t\2")
        buf.write("\2qr\7q\2\2rs\7i\2\2st\7t\2\2tu\7c\2\2uv\7o\2\2v\6\3\2")
        buf.write("\2\2wx\7}\2\2x\b\3\2\2\2yz\7\177\2\2z\n\3\2\2\2{|\7\"")
        buf.write("\2\2|\f\3\2\2\2}~\7.\2\2~\16\3\2\2\2\177\u0080\7=\2\2")
        buf.write("\u0080\20\3\2\2\2\u0081\u0082\7*\2\2\u0082\22\3\2\2\2")
        buf.write("\u0083\u0084\7+\2\2\u0084\24\3\2\2\2\u0085\u0086\7x\2")
        buf.write("\2\u0086\u0087\7q\2\2\u0087\u0088\7k\2\2\u0088\u0089\7")
        buf.write("f\2\2\u0089\26\3\2\2\2\u008a\u008b\7]\2\2\u008b\30\3\2")
        buf.write("\2\2\u008c\u008d\7_\2\2\u008d\32\3\2\2\2\u008e\u008f\7")
        buf.write("k\2\2\u008f\u0090\7h\2\2\u0090\34\3\2\2\2\u0091\u0092")
        buf.write("\7g\2\2\u0092\u0093\7n\2\2\u0093\u0094\7u\2\2\u0094\u0095")
        buf.write("\7g\2\2\u0095\36\3\2\2\2\u0096\u0097\7h\2\2\u0097\u0098")
        buf.write("\7q\2\2\u0098\u0099\7t\2\2\u0099 \3\2\2\2\u009a\u009b")
        buf.write("\7?\2\2\u009b\"\3\2\2\2\u009c\u009d\7t\2\2\u009d\u009e")
        buf.write("\7g\2\2\u009e\u009f\7v\2\2\u009f\u00a0\7w\2\2\u00a0\u00a1")
        buf.write("\7t\2\2\u00a1\u00a2\7p\2\2\u00a2$\3\2\2\2\u00a3\u00a4")
        buf.write("\7d\2\2\u00a4\u00a5\7t\2\2\u00a5\u00a6\7g\2\2\u00a6\u00a7")
        buf.write("\7c\2\2\u00a7\u00a8\7m\2\2\u00a8&\3\2\2\2\u00a9\u00aa")
        buf.write("\7e\2\2\u00aa\u00ab\7q\2\2\u00ab\u00ac\7p\2\2\u00ac\u00ad")
        buf.write("\7v\2\2\u00ad\u00ae\7k\2\2\u00ae\u00af\7p\2\2\u00af\u00b0")
        buf.write("\7w\2\2\u00b0\u00b1\7g\2\2\u00b1(\3\2\2\2\u00b2\u00b3")
        buf.write("\7-\2\2\u00b3\u00b4\7?\2\2\u00b4*\3\2\2\2\u00b5\u00b6")
        buf.write("\7/\2\2\u00b6\u00b7\7?\2\2\u00b7,\3\2\2\2\u00b8\u00b9")
        buf.write("\7e\2\2\u00b9\u00ba\7c\2\2\u00ba\u00bb\7n\2\2\u00bb\u00bc")
        buf.write("\7n\2\2\u00bc\u00bd\7q\2\2\u00bd\u00be\7w\2\2\u00be\u00bf")
        buf.write("\7v\2\2\u00bf.\3\2\2\2\u00c0\u00c1\7/\2\2\u00c1\60\3\2")
        buf.write("\2\2\u00c2\u00c3\7#\2\2\u00c3\62\3\2\2\2\u00c4\u00c5\7")
        buf.write("-\2\2\u00c5\64\3\2\2\2\u00c6\u00c7\7,\2\2\u00c7\66\3\2")
        buf.write("\2\2\u00c8\u00c9\7\61\2\2\u00c98\3\2\2\2\u00ca\u00cb\7")
        buf.write("\'\2\2\u00cb:\3\2\2\2\u00cc\u00cd\7>\2\2\u00cd<\3\2\2")
        buf.write("\2\u00ce\u00cf\7@\2\2\u00cf>\3\2\2\2\u00d0\u00d1\7>\2")
        buf.write("\2\u00d1\u00d2\7?\2\2\u00d2@\3\2\2\2\u00d3\u00d4\7@\2")
        buf.write("\2\u00d4\u00d5\7?\2\2\u00d5B\3\2\2\2\u00d6\u00d7\7?\2")
        buf.write("\2\u00d7\u00d8\7?\2\2\u00d8D\3\2\2\2\u00d9\u00da\7#\2")
        buf.write("\2\u00da\u00db\7?\2\2\u00dbF\3\2\2\2\u00dc\u00dd\7(\2")
        buf.write("\2\u00dd\u00de\7(\2\2\u00deH\3\2\2\2\u00df\u00e0\7~\2")
        buf.write("\2\u00e0\u00e1\7~\2\2\u00e1J\3\2\2\2\u00e2\u00e3\7k\2")
        buf.write("\2\u00e3\u00e4\7p\2\2\u00e4\u00ed\7v\2\2\u00e5\u00e6\7")
        buf.write("d\2\2\u00e6\u00e7\7q\2\2\u00e7\u00e8\7q\2\2\u00e8\u00e9")
        buf.write("\7n\2\2\u00e9\u00ea\7g\2\2\u00ea\u00eb\7c\2\2\u00eb\u00ed")
        buf.write("\7p\2\2\u00ec\u00e2\3\2\2\2\u00ec\u00e5\3\2\2\2\u00ed")
        buf.write("L\3\2\2\2\u00ee\u00f3\5[.\2\u00ef\u00f2\5[.\2\u00f0\u00f2")
        buf.write("\5]/\2\u00f1\u00ef\3\2\2\2\u00f1\u00f0\3\2\2\2\u00f2\u00f5")
        buf.write("\3\2\2\2\u00f3\u00f1\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4")
        buf.write("N\3\2\2\2\u00f5\u00f3\3\2\2\2\u00f6\u00f9\5Q)\2\u00f7")
        buf.write("\u00f9\5S*\2\u00f8\u00f6\3\2\2\2\u00f8\u00f7\3\2\2\2\u00f9")
        buf.write("P\3\2\2\2\u00fa\u00fe\5]/\2\u00fb\u00fd\5]/\2\u00fc\u00fb")
        buf.write("\3\2\2\2\u00fd\u0100\3\2\2\2\u00fe\u00fc\3\2\2\2\u00fe")
        buf.write("\u00ff\3\2\2\2\u00ffR\3\2\2\2\u0100\u00fe\3\2\2\2\u0101")
        buf.write("\u0102\7\62\2\2\u0102\u0103\7z\2\2\u0103\u0105\3\2\2\2")
        buf.write("\u0104\u0106\5_\60\2\u0105\u0104\3\2\2\2\u0106\u0107\3")
        buf.write("\2\2\2\u0107\u0105\3\2\2\2\u0107\u0108\3\2\2\2\u0108T")
        buf.write("\3\2\2\2\u0109\u010a\13\2\2\2\u010aV\3\2\2\2\u010b\u010c")
        buf.write("\7)\2\2\u010c\u010d\5U+\2\u010d\u010e\7)\2\2\u010eX\3")
        buf.write("\2\2\2\u010f\u0113\7$\2\2\u0110\u0112\5U+\2\u0111\u0110")
        buf.write("\3\2\2\2\u0112\u0115\3\2\2\2\u0113\u0111\3\2\2\2\u0113")
        buf.write("\u0114\3\2\2\2\u0114\u0116\3\2\2\2\u0115\u0113\3\2\2\2")
        buf.write("\u0116\u0117\7$\2\2\u0117Z\3\2\2\2\u0118\u0119\t\2\2\2")
        buf.write("\u0119\\\3\2\2\2\u011a\u011b\t\3\2\2\u011b^\3\2\2\2\u011c")
        buf.write("\u011d\t\4\2\2\u011d`\3\2\2\2\u011e\u011f\7v\2\2\u011f")
        buf.write("\u0120\7t\2\2\u0120\u0121\7w\2\2\u0121\u0128\7g\2\2\u0122")
        buf.write("\u0123\7h\2\2\u0123\u0124\7c\2\2\u0124\u0125\7n\2\2\u0125")
        buf.write("\u0126\7u\2\2\u0126\u0128\7g\2\2\u0127\u011e\3\2\2\2\u0127")
        buf.write("\u0122\3\2\2\2\u0128b\3\2\2\2\u0129\u012b\t\5\2\2\u012a")
        buf.write("\u0129\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012a\3\2\2\2")
        buf.write("\u012c\u012d\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u012f\b")
        buf.write("\62\2\2\u012fd\3\2\2\2\u0130\u0132\7\17\2\2\u0131\u0133")
        buf.write("\7\f\2\2\u0132\u0131\3\2\2\2\u0132\u0133\3\2\2\2\u0133")
        buf.write("\u0136\3\2\2\2\u0134\u0136\7\f\2\2\u0135\u0130\3\2\2\2")
        buf.write("\u0135\u0134\3\2\2\2\u0136\u0137\3\2\2\2\u0137\u0138\b")
        buf.write("\63\2\2\u0138f\3\2\2\2\u0139\u013a\7\61\2\2\u013a\u013b")
        buf.write("\7\61\2\2\u013b\u013f\3\2\2\2\u013c\u013e\n\6\2\2\u013d")
        buf.write("\u013c\3\2\2\2\u013e\u0141\3\2\2\2\u013f\u013d\3\2\2\2")
        buf.write("\u013f\u0140\3\2\2\2\u0140\u0142\3\2\2\2\u0141\u013f\3")
        buf.write("\2\2\2\u0142\u0143\b\64\2\2\u0143h\3\2\2\2\17\2\u00ec")
        buf.write("\u00f1\u00f3\u00f8\u00fe\u0107\u0113\u0127\u012c\u0132")
        buf.write("\u0135\u013f\3\b\2\2")
        return buf.getvalue()


class SimpleCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    Data_type = 37
    IDENTIFIER = 38
    INTLITERAL = 39
    Decimal_Literal = 40
    Hex_Literal = 41
    CHAR = 42
    CHARLITERAL = 43
    STRINGLITERAL = 44
    ALPHA = 45
    DIGIT = 46
    HEX_DIGIT = 47
    BOOLEANLITERAL = 48
    White = 49
    Newline = 50
    LineComment = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'class'", "'Program'", "'{'", "'}'", "' '", "','", "';'", "'('", 
            "')'", "'void'", "'['", "']'", "'if'", "'else'", "'for'", "'='", 
            "'return'", "'break'", "'continue'", "'+='", "'-='", "'callout'", 
            "'-'", "'!'", "'+'", "'*'", "'/'", "'%'", "'<'", "'>'", "'<='", 
            "'>='", "'=='", "'!='", "'&&'", "'||'" ]

    symbolicNames = [ "<INVALID>",
            "Data_type", "IDENTIFIER", "INTLITERAL", "Decimal_Literal", 
            "Hex_Literal", "CHAR", "CHARLITERAL", "STRINGLITERAL", "ALPHA", 
            "DIGIT", "HEX_DIGIT", "BOOLEANLITERAL", "White", "Newline", 
            "LineComment" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "Data_type", "IDENTIFIER", 
                  "INTLITERAL", "Decimal_Literal", "Hex_Literal", "CHAR", 
                  "CHARLITERAL", "STRINGLITERAL", "ALPHA", "DIGIT", "HEX_DIGIT", 
                  "BOOLEANLITERAL", "White", "Newline", "LineComment" ]

    grammarFileName = "SimpleCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


