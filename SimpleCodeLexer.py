# Generated from SimpleCode.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\63")
        buf.write("\u0116\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\5")
        buf.write("\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\16\3\16\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\23\3\23")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\27\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35")
        buf.write("\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3\"\3#\3#\3#")
        buf.write("\3$\3$\3$\3%\3%\3%\3&\3&\3&\3\'\3\'\3\'\3(\3(\3(\3)\3")
        buf.write(")\3)\3)\3)\3*\3*\3*\3*\3*\3*\3+\3+\3,\3,\3-\3-\3.\3.\3")
        buf.write("/\3/\3\60\3\60\3\60\3\60\7\60\u0107\n\60\f\60\16\60\u010a")
        buf.write("\13\60\3\61\6\61\u010d\n\61\r\61\16\61\u010e\3\62\3\62")
        buf.write("\5\62\u0113\n\62\3\62\3\62\2\2\63\3\3\5\4\7\5\t\6\13\7")
        buf.write("\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21")
        buf.write("!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67")
        buf.write("\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61")
        buf.write("a\62c\63\3\2\7\4\2C\\c|\3\2\62;\5\2\62;CHch\4\2\f\f\17")
        buf.write("\17\5\2\13\f\17\17\"\"\2\u0118\2\3\3\2\2\2\2\5\3\2\2\2")
        buf.write("\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17")
        buf.write("\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3")
        buf.write("\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2")
        buf.write("\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3")
        buf.write("\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2")
        buf.write("\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3")
        buf.write("\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E")
        buf.write("\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2")
        buf.write("O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2")
        buf.write("\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2")
        buf.write("\2\2c\3\2\2\2\3e\3\2\2\2\5k\3\2\2\2\7m\3\2\2\2\tu\3\2")
        buf.write("\2\2\13w\3\2\2\2\ry\3\2\2\2\17{\3\2\2\2\21}\3\2\2\2\23")
        buf.write("\177\3\2\2\2\25\u0081\3\2\2\2\27\u0086\3\2\2\2\31\u0088")
        buf.write("\3\2\2\2\33\u008a\3\2\2\2\35\u008e\3\2\2\2\37\u0096\3")
        buf.write("\2\2\2!\u0099\3\2\2\2#\u009e\3\2\2\2%\u00a2\3\2\2\2\'")
        buf.write("\u00a4\3\2\2\2)\u00ab\3\2\2\2+\u00b1\3\2\2\2-\u00ba\3")
        buf.write("\2\2\2/\u00bd\3\2\2\2\61\u00c0\3\2\2\2\63\u00c8\3\2\2")
        buf.write("\2\65\u00ca\3\2\2\2\67\u00cc\3\2\2\29\u00ce\3\2\2\2;\u00d0")
        buf.write("\3\2\2\2=\u00d2\3\2\2\2?\u00d4\3\2\2\2A\u00d6\3\2\2\2")
        buf.write("C\u00d8\3\2\2\2E\u00db\3\2\2\2G\u00de\3\2\2\2I\u00e1\3")
        buf.write("\2\2\2K\u00e4\3\2\2\2M\u00e7\3\2\2\2O\u00ea\3\2\2\2Q\u00ed")
        buf.write("\3\2\2\2S\u00f2\3\2\2\2U\u00f8\3\2\2\2W\u00fa\3\2\2\2")
        buf.write("Y\u00fc\3\2\2\2[\u00fe\3\2\2\2]\u0100\3\2\2\2_\u0102\3")
        buf.write("\2\2\2a\u010c\3\2\2\2c\u0112\3\2\2\2ef\7e\2\2fg\7n\2\2")
        buf.write("gh\7c\2\2hi\7u\2\2ij\7u\2\2j\4\3\2\2\2kl\7\"\2\2l\6\3")
        buf.write("\2\2\2mn\7R\2\2no\7t\2\2op\7q\2\2pq\7i\2\2qr\7t\2\2rs")
        buf.write("\7c\2\2st\7o\2\2t\b\3\2\2\2uv\7}\2\2v\n\3\2\2\2wx\7\177")
        buf.write("\2\2x\f\3\2\2\2yz\7]\2\2z\16\3\2\2\2{|\7_\2\2|\20\3\2")
        buf.write("\2\2}~\7.\2\2~\22\3\2\2\2\177\u0080\7=\2\2\u0080\24\3")
        buf.write("\2\2\2\u0081\u0082\7x\2\2\u0082\u0083\7q\2\2\u0083\u0084")
        buf.write("\7k\2\2\u0084\u0085\7f\2\2\u0085\26\3\2\2\2\u0086\u0087")
        buf.write("\7*\2\2\u0087\30\3\2\2\2\u0088\u0089\7+\2\2\u0089\32\3")
        buf.write("\2\2\2\u008a\u008b\7k\2\2\u008b\u008c\7p\2\2\u008c\u008d")
        buf.write("\7v\2\2\u008d\34\3\2\2\2\u008e\u008f\7d\2\2\u008f\u0090")
        buf.write("\7q\2\2\u0090\u0091\7q\2\2\u0091\u0092\7n\2\2\u0092\u0093")
        buf.write("\7g\2\2\u0093\u0094\7c\2\2\u0094\u0095\7p\2\2\u0095\36")
        buf.write("\3\2\2\2\u0096\u0097\7k\2\2\u0097\u0098\7h\2\2\u0098 ")
        buf.write("\3\2\2\2\u0099\u009a\7g\2\2\u009a\u009b\7n\2\2\u009b\u009c")
        buf.write("\7u\2\2\u009c\u009d\7g\2\2\u009d\"\3\2\2\2\u009e\u009f")
        buf.write("\7h\2\2\u009f\u00a0\7q\2\2\u00a0\u00a1\7t\2\2\u00a1$\3")
        buf.write("\2\2\2\u00a2\u00a3\7?\2\2\u00a3&\3\2\2\2\u00a4\u00a5\7")
        buf.write("t\2\2\u00a5\u00a6\7g\2\2\u00a6\u00a7\7v\2\2\u00a7\u00a8")
        buf.write("\7w\2\2\u00a8\u00a9\7t\2\2\u00a9\u00aa\7p\2\2\u00aa(\3")
        buf.write("\2\2\2\u00ab\u00ac\7d\2\2\u00ac\u00ad\7t\2\2\u00ad\u00ae")
        buf.write("\7g\2\2\u00ae\u00af\7c\2\2\u00af\u00b0\7m\2\2\u00b0*\3")
        buf.write("\2\2\2\u00b1\u00b2\7e\2\2\u00b2\u00b3\7q\2\2\u00b3\u00b4")
        buf.write("\7p\2\2\u00b4\u00b5\7v\2\2\u00b5\u00b6\7k\2\2\u00b6\u00b7")
        buf.write("\7p\2\2\u00b7\u00b8\7w\2\2\u00b8\u00b9\7g\2\2\u00b9,\3")
        buf.write("\2\2\2\u00ba\u00bb\7-\2\2\u00bb\u00bc\7?\2\2\u00bc.\3")
        buf.write("\2\2\2\u00bd\u00be\7/\2\2\u00be\u00bf\7?\2\2\u00bf\60")
        buf.write("\3\2\2\2\u00c0\u00c1\7e\2\2\u00c1\u00c2\7c\2\2\u00c2\u00c3")
        buf.write("\7n\2\2\u00c3\u00c4\7n\2\2\u00c4\u00c5\7q\2\2\u00c5\u00c6")
        buf.write("\7w\2\2\u00c6\u00c7\7v\2\2\u00c7\62\3\2\2\2\u00c8\u00c9")
        buf.write("\7/\2\2\u00c9\64\3\2\2\2\u00ca\u00cb\7#\2\2\u00cb\66\3")
        buf.write("\2\2\2\u00cc\u00cd\7-\2\2\u00cd8\3\2\2\2\u00ce\u00cf\7")
        buf.write(",\2\2\u00cf:\3\2\2\2\u00d0\u00d1\7\61\2\2\u00d1<\3\2\2")
        buf.write("\2\u00d2\u00d3\7\'\2\2\u00d3>\3\2\2\2\u00d4\u00d5\7>\2")
        buf.write("\2\u00d5@\3\2\2\2\u00d6\u00d7\7@\2\2\u00d7B\3\2\2\2\u00d8")
        buf.write("\u00d9\7>\2\2\u00d9\u00da\7?\2\2\u00daD\3\2\2\2\u00db")
        buf.write("\u00dc\7@\2\2\u00dc\u00dd\7?\2\2\u00ddF\3\2\2\2\u00de")
        buf.write("\u00df\7?\2\2\u00df\u00e0\7?\2\2\u00e0H\3\2\2\2\u00e1")
        buf.write("\u00e2\7#\2\2\u00e2\u00e3\7?\2\2\u00e3J\3\2\2\2\u00e4")
        buf.write("\u00e5\7(\2\2\u00e5\u00e6\7(\2\2\u00e6L\3\2\2\2\u00e7")
        buf.write("\u00e8\7~\2\2\u00e8\u00e9\7~\2\2\u00e9N\3\2\2\2\u00ea")
        buf.write("\u00eb\7\62\2\2\u00eb\u00ec\7z\2\2\u00ecP\3\2\2\2\u00ed")
        buf.write("\u00ee\7v\2\2\u00ee\u00ef\7t\2\2\u00ef\u00f0\7w\2\2\u00f0")
        buf.write("\u00f1\7g\2\2\u00f1R\3\2\2\2\u00f2\u00f3\7h\2\2\u00f3")
        buf.write("\u00f4\7c\2\2\u00f4\u00f5\7n\2\2\u00f5\u00f6\7u\2\2\u00f6")
        buf.write("\u00f7\7g\2\2\u00f7T\3\2\2\2\u00f8\u00f9\7)\2\2\u00f9")
        buf.write("V\3\2\2\2\u00fa\u00fb\7$\2\2\u00fbX\3\2\2\2\u00fc\u00fd")
        buf.write("\t\2\2\2\u00fdZ\3\2\2\2\u00fe\u00ff\t\3\2\2\u00ff\\\3")
        buf.write("\2\2\2\u0100\u0101\t\4\2\2\u0101^\3\2\2\2\u0102\u0103")
        buf.write("\7\61\2\2\u0103\u0104\7\61\2\2\u0104\u0108\3\2\2\2\u0105")
        buf.write("\u0107\n\5\2\2\u0106\u0105\3\2\2\2\u0107\u010a\3\2\2\2")
        buf.write("\u0108\u0106\3\2\2\2\u0108\u0109\3\2\2\2\u0109`\3\2\2")
        buf.write("\2\u010a\u0108\3\2\2\2\u010b\u010d\t\6\2\2\u010c\u010b")
        buf.write("\3\2\2\2\u010d\u010e\3\2\2\2\u010e\u010c\3\2\2\2\u010e")
        buf.write("\u010f\3\2\2\2\u010fb\3\2\2\2\u0110\u0113\5a\61\2\u0111")
        buf.write("\u0113\5_\60\2\u0112\u0110\3\2\2\2\u0112\u0111\3\2\2\2")
        buf.write("\u0113\u0114\3\2\2\2\u0114\u0115\b\62\2\2\u0115d\3\2\2")
        buf.write("\2\6\2\u0108\u010e\u0112\3\b\2\2")
        return buf.getvalue()


class SimpleCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    ALPHA = 44
    DIGIT = 45
    HEX_DIGIT = 46
    COMMENT = 47
    SPACE = 48
    WS = 49

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'class'", "' '", "'Program'", "'{'", "'}'", "'['", "']'", "','", 
            "';'", "'void'", "'('", "')'", "'int'", "'boolean'", "'if'", 
            "'else'", "'for'", "'='", "'return'", "'break'", "'continue'", 
            "'+='", "'-='", "'callout'", "'-'", "'!'", "'+'", "'*'", "'/'", 
            "'%'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'&&'", 
            "'||'", "'0x'", "'true'", "'false'", "'''", "'\"'" ]

    symbolicNames = [ "<INVALID>",
            "ALPHA", "DIGIT", "HEX_DIGIT", "COMMENT", "SPACE", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "ALPHA", 
                  "DIGIT", "HEX_DIGIT", "COMMENT", "SPACE", "WS" ]

    grammarFileName = "SimpleCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


