grammar SimpleCode;           
program  : 'class' ' ' 'Program' ' ' '{'  field_decl* method_decl*  '}' ;
field_decl : data_type variable (',' variable)* ';' ;
method_decl: ('void' | data_type)  Identifier '(' method_params? ')' block ;
variable : Identifier | Identifier '[' int_literal ']' ;
method_params : data_type Identifier (',' data_type Identifier)* ;
block : '{' var_decl* statement* '}' ;
var_decl : data_type Identifier (',' Identifier)* ';';
statement : location assign_op expr ';' | method_call ';' | 'if' '(' (expr) ')' block ('else' block)? | 'for' Identifier '=' (expr) ',' (expr) block | 'return' (expr)? ';' | 'break' ';' | 'continue' ';' | block ;
assign_op : '=' | '+=' | '-=' ;
method_call : method_name '(' method_call_params? ')' | 'callout' (string_literal (',' callout_arg (',' callout_arg)*)?) ;
method_call_params : data_type Identifier (',' data_type Identifier)* ;
data_type : INT | BOOL ;
method_name : Identifier ;
location : Identifier | Identifier '[' expr ']' ;
expr : location | method_call | literal | expr bin_op expr | '-' expr | '!' expr | '(' expr ')' ;
callout_arg : expr | string_literal ;
bin_op : arith_op | rel_op | eq_op | cond_op ;
arith_op : '+' | '-' | '*' | '/' + '%' ;
rel_op : '<' | '>' | '<=' | '>=' ;
eq_op : '==' | '!=' ;
cond_op : '&&' | '||' ;
literal : int_literal | Char_Literal | Boolean_Literal ;
Identifier : ALPHA Alpha_Num* ;
Alpha_Num : ALPHA | DIGIT ;
int_literal : Decimal_Literal | Hex_Literal ;
Decimal_Literal : DIGIT DIGIT* ;
Hex_Literal : '0x' HEX_DIGIT+ ;
Boolean_Literal : 'true' | 'false' ;
CHAR: . ;
Char_Literal : '\'' CHAR '\''  ;
string_literal : '"' CHAR* '"' ;

ALPHA : [a-zA-Z] ;
DIGIT : [0-9] ;
HEX_DIGIT : [0-9a-fA-F] ;

INT : 'int' ;
BOOL : 'boolean' ;

White : [ \t]+ -> skip ;
Newline : ( '\r' '\n'? | '\n' ) -> skip ;
LineComment : '//' ~[\r\n]* -> skip ;