grammar SimpleCode;           
program  : 'class' ' ' 'Program' ' ' '{' field_decl* method_decl* '}' ;
variable : identifier | identifier '[' int_literal ']' ;
field_decl : data_type variable (',' variable)* ';' ;
method_decl_type : data_type | 'void' ;
method_decl: method_decl_type identifier '(' method_params? ')' block ;
method_params : data_type identifier (',' data_type identifier)* ;
block : '{' var_decl* statement* '}' ;
var_decl : data_type identifier (',' identifier)* ';';
data_type : 'int' | 'boolean';
statement : location assign_op expr ';' | method_call ';' | 'if' '(' (expr) ')' block ('else' block)? | 'for' identifier '=' (expr) ',' (expr) block | 'return' (expr)? ';' | 'break' ';' | 'continue' ';' | block ;
assign_op : '=' | '+=' | '-=' ;
method_call : method_name ((data_type identifier (',' data_type identifier)*)?) | 'callout' (string_literal (',' callout_arg (',' callout_arg)*)?) ;
method_name : identifier ;
location : identifier | identifier '[' expr ']' ;
expr : location | method_call | literal | expr bin_op expr | '-' expr | '!' expr | '(' expr ')' ;
callout_arg : expr | string_literal ;
bin_op : arith_op | rel_op | eq_op | cond_op ;
arith_op : '+' | '-' | '*' | '/' + '%' ;
rel_op : '<' | '>' | '<=' | '>=' ;
eq_op : '==' | '!=' ;
cond_op : '&&' | '||' ;
literal : int_literal | char_literal | bool_literal ;
identifier : ALPHA alpha_num* ;
alpha_num : ALPHA | DIGIT ;
ALPHA : [a-zA-Z] ;
DIGIT : [0-9] ;
HEX_DIGIT : [0-9a-fA-F] ;
int_literal : decimal_literal | hex_literal ;
decimal_literal : DIGIT DIGIT* ;
hex_literal : '0x' HEX_DIGIT HEX_DIGIT* ;
bool_literal : 'true' | 'false' ;
char: . ;
char_literal : '\'' char '\''  ;
string_literal : '"' char* '"' ;
COMMENT :  '//' ~( '\r' | '\n' )* ;
SPACE : [ \t\r\n]+;
WS : ( SPACE | COMMENT ) -> skip ;